---
- name: Set up host for nebensinn site
  hosts: site
  gather_facts: no

  tasks:
    # Change SSH port, see https://dmsimard.com/2016/03/15/changing-the-ssh-port-with-ansible/

    # ansible_port can change throughout this role, keep a copy around
    - name: set configured port fact
      set_fact:
        configured_port: "{{ ansible_port }}"
    
    # From localhost, check if we're able to reach {{ inventory_hostname }} on
    # port 22
    - name: check if we're using the default SSH port
      wait_for:
        port: "22"
        state: "started"
        host: "{{ inventory_hostname }}"
        connect_timeout: "1"
        timeout: "2"
      delegate_to: "localhost"
      ignore_errors: "yes"
      register: default_ssh

    # If reachable, continue the following tasks with this port
    - name: set inventory ansible_port to default
      set_fact:
        ansible_port: "22"
      when: default_ssh is defined and
            default_ssh.state is defined and
            default_ssh.state == "started"
      register: ssh_port_set

    # If unreachable on port 22, check if we're able to reach
    # {{ inventory_hostname }} on {{ ansible_port }} provided by the inventory
    # from localhost
    - name: check if we're using the inventory-provided SSH port
      wait_for:
        port: "{{ ansible_port }}"
        state: "started"
        host: "{{ inventory_hostname }}"
        connect_timeout: "5"
        timeout: "10"
      delegate_to: "localhost"
      ignore_errors: "yes"
      register: configured_ssh
      when: default_ssh is defined and
            default_ssh.state is defined and
            default_ssh.state == "started"

    # If {{ ansible_port }} is reachable, we don't need to do anything special
    - name: SSH port is configured properly
      debug:
        msg: "SSH port is configured properly"
      when: configured_ssh is defined and
            configured_ssh.state is defined and
            configured_ssh.state == "started"
      register: ssh_port_set

    # If the SSH port is neither the default or the configured, give up.
    - name: fail if SSH port was not auto-detected (unknown)
      fail:
        msg: "The SSH port is neither 22 or {{ ansible_port }}."
      when: ssh_port_set is undefined
    
    # Sanity check, make sure Ansible is able to connect to the host
    - name: confirm host connection works
      ping:
    
    - name: allow alternative SSH port
      iptables:
        chain: INPUT
        protocol: tcp
        destination_port: "5365"
        jump: ACCEPT
      notify:
        - persist iptables

    - name: setup alternative SSH port
      lineinfile:
        dest: "/etc/ssh/sshd_config"
        regexp: "^#?Port"
        line: "Port {{ configured_port }}"
      notify: "Restart sshd"

    - name: ensure SSH is reloaded if need be
      meta: flush_handlers
    
    # We're done, make sure ansible_port is set properly so that any tasks
    # after this use the right ansible_port.
    - name: ensure we use the configured SSH port
      set_fact:
        ansible_port: "{{ configured_port }}"
    
    # Gather facts should be set to false when running this role since it will
    # fail if the Ansible SSH port is not set correctly.
    # We run setup to gather facts here once the SSH port is set up.
    - name: run deferred setup to gather facts
      setup:

    - name: install packages for unattended upgrades and email
      apt:
        name:
          - unattended-upgrades
          - apt-listchanges
          - needrestart
          - mailutils
          - default-dbus-session-bus
          - python3-apt-dbg
          - python3-dbus-dbg
          - eximon4
          - swaks
          - dns-root-data
          - file

    - pause:
        prompt: Please run dpkg-reconfigure exim4-config on the host now

    - pause:
        prompt: Please provide SMTP login data in passwd.client in form *:username:password

    - name: copy user credentials
      copy:
        src: passwd.client
        dest: /etc/exim4

    - name: copy exim variables
      copy:
        src: exim4.conf.localmacros
        dest: /etc/exim4

    - name: allow unqualified domains (e.g. email to root)
      block:
      - lineinfile:
          dest: "/etc/exim4/conf.d/main/02_exim4-config_options"
          regexp: "^#? sender_unqualified_hosts ="
          line: " sender_unqualified_hosts = *"
        notify: restart exim
      - lineinfile:
          dest: "/etc/exim4/conf.d/main/02_exim4-config_options"
          regexp: "^#? recipient_unqualified_hosts ="
          line: " recipient_unqualified_hosts = *"
        notify: restart exim

    - name: ensure exim4 is reloaded if need be
      meta: flush_handlers

    - name: send test email
      mail:
        subject: Test email from Ansible

    - pause:
        prompt: Please check if the test email arrived.

    - name: configure installation of all upgrades
      lineinfile:
        dest: "/etc/apt/apt.conf.d/50unattended-upgrades"
        regexp: '^(//)? *"origin=Debian,codename=\${distro_codename}-updates";'
        line: '        "origin=Debian,codename=${distro_codename}-updates";'

    - name: send email on updates
      lineinfile:
        dest: "/etc/apt/apt.conf.d/50unattended-upgrades"
        regexp: '^(//)?Unattended-Upgrade::Mail ".*";'
        line: 'Unattended-Upgrade::Mail "root";'

    - name: automatically remove unused packages
      lineinfile:
        dest: "/etc/apt/apt.conf.d/50unattended-upgrades"
        regexp: '^(//)?Unattended-Upgrade::Remove-Unused-Dependencies ".*";'
        line: 'Unattended-Upgrade::Remove-Unused-Dependencies "true";'

    - name: automatically reboot
      block:
      - lineinfile:
          dest: "/etc/apt/apt.conf.d/50unattended-upgrades"
          regexp: '^(//)?Unattended-Upgrade::Automatic-Reboot ".*";'
          line: 'Unattended-Upgrade::Automatic-Reboot "true";'
      - lineinfile:
          dest: "/etc/apt/apt.conf.d/50unattended-upgrades"
          regexp: '^(//)?Unattended-Upgrade::Automatic-Reboot-Time "02:00";'
          line: 'Unattended-Upgrade::Automatic-Reboot-Time "02:00";'

  handlers:
    - name: update exim configuration
      command: update-exim4.conf
      listen: "restart exim"
    - name: restart exim server
      systemd:
        name: exim4
        enabled: yes
        state: restarted
      listen: "restart exim"
    - name: Restart sshd
      systemd:
        name: sshd
        enabled: yes
        state: restarted
    # from https://github.com/chmduquesne/ansible-iptables-persistent
    - name: save iptables v4 rules
      shell: iptables-save > /etc/iptables/rules.v4
      listen: persist iptables
    - name: save iptables v6 rules
      shell: ip6tables-save > /etc/iptables/rules.v6
      listen: persist iptables
